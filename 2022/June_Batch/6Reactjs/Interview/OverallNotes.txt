Setup For Reactjs:
1.We need to install nodejs latest version above 16
2.We need to install reactjs - npx create-react-app project-name
3.To run the project - npm start
=================================
Main Files:
1.HTML - Inside the public folder index.html 
2.Index.js - start phase of js file 
3.App.js - main source code file 
4.package.json - configuration file 
5.node_modules - all packages are installed here. It can be downloaded at any time from network: npm install 
=======================================================
Inside the index.js file 
1.first file that is used to render the react application to html 
2.using the package ReactDOM.createRoot()
=================================================
App.js 
1.For latest version functional component is written 
Example:
function App(){
	  return (<div>Hello </div>);
}
export default App;
2.every function inside the react component will return jsx(javascript xml).
3.Inside the jsx we are returning the html code from virtual dom to real dom.
4.Jsx Rules:
      1.All html tags is to be closed.
      2.CSS class should be rename to className.
      3.Always it should wrapped one element example div,<></>
================================================
State and Props in functional component:
State:
1.Any data if you have dynamic value we need to store in state.otherwise react will not re-render for static data.
2.For dynamic value we need to store in state.
3.Whenever changes happen in dynamic value. React will rerender again.
4.To use state in functional component we need to use hooks.
Example:
const [getList,setList]=useState('');
5.you can declare state with some initialize value but it is not mandatory.
6.state will return two values.
          1.Updated/latest  state value 
          2.Setting/updated the current state value
7.Whenever updates happen in state the entire variable will be overwritten.
8.always use spread parameter while updating the array or object. because react component will think same address there is no to rerender state.
<!-- <script>
    //spread
    let listOne=[1,2];
    let listTwo=listOne;
    console.log(listOne,listTwo);
    listTwo.push(5);
    console.log(listOne,listTwo);
</script> -->

<script>
    //spread
    let listOne=[1,2];
    let listTwo=[...listOne];
    console.log(listOne,listTwo);
    listTwo.push(5);
    console.log(listOne,listTwo);
</script>

Props:
9.Props is nothing but an argument to pass value from parent component to child component.
10.It is single object argument inside this you will have multiple properties.
11.you can pass any datatype from parent to child component.
Example:
Function App{
	
	return(
     <Child fullName="akash" age="44">
	)
}
export default App;

Function Child(props){
	 return (<div>{props.fullName} {props.age}</div>)
}
============================================
Handling Form in Functional component:
1.Always use state to handle the form values and error
2.Always use object inside the state.
3.Declare two methods one is for updating the value and final submission
4.During update please use spread parameter to copy existing property of object.
5.During final submission we need to use preventDefault method to avoid further course of action.
6.Declare separate state variable for handling error.
7.use Regex pattern to handle errors inside the form and display proper error message.
Example:
Step1:
  const [getList,setList]= useState({
        mobile:'no mobile',
        price:2000,
        discount:2000
     });
step2:
       const onChangeHandler=(event)=>{
         setList({...getList,[event.target.name]:event.target.value});
       }
step3:
  const onSubmitHandler=(event)=>{
         event.preventDefault();
       }

step4:
   return(<form>
     Enter Price Details:<input type="text" name="price" onChange={onChangeHandler} id="price"/>
       <button onClick={onSubmitHandler}>Submit</button>
   </form>
 //inside the form input tag. name and onChange method is important.
=============================================
Handling Form Validation in functional component:
Step1:
   const [getFormValidation,setFormValidation]=useState({
    firstName:false
   });

Step2:
export const alphaNumericValidation = (input) => {
    let result = /^[a-zA-Z0-9]{3,16}$/.test(input);
    if (result) {
        return false;
    }
    return true;
}

step3:
   const formValidationCheck=()=>{
    setFormValidation({
        firstName:alphaNumericValidation(getForm.firstName)
    });   
   }

step4:
   {getGlobal && getFormValidation.firstName && <div className="danger">First Name must be alphanumeric and contain 3 - 16 characters</div>} 

==============================================================
Displaying image,icon,video:
1.While displaying image/icon/video we need to import dynamically the path of this file using import statement.
2.All external files like image/icon/video create one assets folder inside the src folder.
3.Don't give the file path directly inside the react application it will through the error.
Example:
import image  from '../image';
const ImageList = ()=>{
   return (<div>
    <img src={image}/>
   </div>)
}
export default ImageList;
====================================================================
Class Components Overall:


Inside the react application. How to write the class component:
Example:
class App extends Component{
	render(){
	    return (<div>Hello world</div>)
	}
}
or 
import React from 'react';
class App extends React.Component{ 
	   render(){
	        return (<div>Hello world</div>)
	   }
}

1.render is a lifecyle method use to return jsx.
2.It is mandatory method other class component will not return anything to the UI.
==============================================================
States in Class Components :
1.To use state inside the class component we need to use state variable inside the constructor
2.Inside the constructor we need to initialize the state variable with some dummy values.
3.you can have only one state variable inside the class component
4.State variable should be an object.
5.Inside the object you can have any datatypes.
6.Any variable declaration inside the class component you need to have this keyword.
Example:
import { Component } from ‘react’;
class App extends Component{
    constructor(){
        this.state={
            fullName:‘’,
            age:44,
            flag:true,
            list:[1,2,3,4]
        }
    }
	render(){
	    return (<div>Hello world</div>)
	}
}
====================================================
Props in Class Components :
//Passing argument from parent component to child component 
//To access props in class component we need to use this keyword and variable name is props.
//Whenver you need props inside the class component please use constructor method and pass props to super 
class constructor.
Example:
import Child from './Child';
class App extends Component{

  constructor(props){
     super(props);
  }

  render(){
	return (<Child fullName={"salman"} age={"11"}/>)
  }
}

class Child extends Component{


  constructor(props){
     super(props);
  }

  render(){
	return(<div>{this.props.fullName}-{this.props.age}</div>)
  }
}
========================================================
Iterating Data in functional component:(Map Function)
1.If you have any array we can iteration array inside the jsx.
2.To iterate inside the jsx we need to use map function.
3.map function is only one method to iterate the data inside the jsx. others method are not allowed inside the jsx.
4.map function will consists of two arguments first is iteration data and second is index.
4.Whenever we use map function please add key property inside the map with outer div tag.
5.You can write the events(onClick,onChange) and you can pass index value to differentiate the click of the data from the list.
Example:
 {state.getList.map((obj,index)=>{
             return(<tr key={index}>
              <td>{index+1}</td>
             <td>{obj.title}</td>
             <td><button onClick={()=>onEditInitialHandler(index)} class="btn btn-primary">Edit</button></td>
             </tr>)
          })}
============================================================================
Array inside Object:
1.Any data the is displayed on UI will have similar set of data with differet properties.
2.Most of the time will display the similar set of data to users. Example flipkart,amazon,youtube,facebook,netflix.
3.But array will iterate the data using map function.Inside the array will have object for each index to display different set of data for each iteration.
Example:
"product": [
    {
      "title": "language",
      "amount": 5000,
      "duration": "7",
      "id": 2
    },
    {
      "title": "css",
      "amount": 3000,
      "duration": 2,
      "id": 4
    },
    {
      "title": "3",
      "amount": "3",
      "duration": "3",
      "id": 5
    }]
 ============================================
Life Cycle of hooks in Functional component or life cycle in functional component 
1.life cycle means binding of javascript data to html page.
2.life cycle in functional component can be implement by using hooks called useEffect.
3.Depends upon the useEffect parameter we can diffferentiate different life cycle in function component.
4.In functional component we have mounting,updating,unmounting phase but there is no error handling phase 
present inside the functional component.
Example:
1.
useEffect(()=>{},[]) ---> It will call only one time during initial rendering of functional
component.

2.
useEffect(()=>{}) --> It will call for every update in state or props.

3.
useEffect(()=>{},[state]) -->whenver there is a change in particular state or props given in array bracket. 
useEffect(()=>{},[state,props]) For that it will again trigger.
useEffect(()=>{},[props1,props2])
useEffect(()=>{},[state1,state3])


4.useEffect(()=>{   --->it will call whenever we unmount the component from react rendering.
   return ()=>{cleartTimeout()}
})

React useEffect hooks with  life cycle of class component:

1.useEffect(()=>{},[])  --- componentDidMount 
2.useEffect(()=>{})  --- componentDidUpdate
3.useEffect(()=>{},[state]) --- componentDidUpdate(write condition inside this method)
4.useEffect(()=>{  
   return ()=>{cleartTimeout()}  -- componentWillUnmount
})
==============================================================
life hooks in class component:
1.Mounting - Binding of javascript with html or rendering the initial data in functional component.
2.updating - whenever there is change in state or props is called updating phase.
3.unMounting - whenever we leave the component.
4.Error Handling - any error occur in jsx.

Mounting: constructor ---> render ---> componentDidMount
1.constructor  - it is use to initialize the props and state data.
2.render - it is use to render the initial html tag to original DOM.
3.componentDidMount -- it is use to bind the javascript code with html or Mainly used for rest api call.

Updating:shouldComponentUpdate-render-->componentDidUpdate 
1.shouldComponentUpdate - whenever we change props or state before rendering we can change the data or we can stop further events of update.
2.render  - it is use to render the initial html tag to original DOM.
3.componentDidUpdate - after updates in state or props this method will trigger.

unMounting
1.componentWillUnMount - whenever we leave the component. beforing leaving the component it will call.

Error Handling
1.getDerivedStateFromError - whenever error occured in jsx this method will trigger.
2.componentDidCatch - this method will receive an argument to check the type of error.

==============================================================
Types of Hooks in functional component:
1.hooks concept is available from react version 16.9 (2019).
2.hooks will support only in functional component not in class component.
Types 
1.useState   - 1
2.useReducer 
3.useEffect   - 2
4.useCallback
5.useMemo 
6.useRef 
7.useContext  - 3
8.useNavigate

1.useState - it helps to maintain state inside the functional component and it will return 
two arguments. 1.latest state data 2.to update the state data.
Example:
const [getList,setList]=useState("0");

2.useReducer - it also helps to maintain the state inside the functional component. 
if we have different condition for state update we can use useReducer instead of useState.

3.useEffect - it is an cycle life phase in functional component 

4.useCallback - Mainly for performance. it is use to avoid rendering of duplicate component again and again.

5.useMemo - Mainly for performance. it is help to store cache data. No need to recalculate the existing logic.

6.useRef - It is use to access the DOM manipulation directly and it is safe to use instead using javascript DOM methods.

7.useContext  - It is use to avoid drilling of props to nested components.
(i)Provider - provider will provide data to the props.
(ii)Consumer - consumer will consume the data from props.

8.useNavigate - it is used to navigate from one component to another component by using 
react-router.

=======================================
Rest API integration with axios
1.Rest ApI we can integrate with following approach 
      1.fetch  - default javascript package
      2.axios - third party package and most familar one. 
2.With axios more features is added like error handling in easy way and interceptor concept and react developers community 
prefer using this package.
3.Install this package using npm 
4.axios will return promise and it is async code 
5.axios will take care of converting json to javascript and javacript to json 
6.axios will support all http methods liks get,post,patch,delete.
example:
import axios form axios;

axios.get("url").then().catch()

7.axios will work both in functional component as well as in class component.
==================================================================
Redux:
1.Local State or component State:
1.useState
2.useReducer

2.Passing state from parent to any child component 
1.useContext - Data can be passed only downwards direction there is no upwards directions

centralized state or  Flux architecture or redux implemenation
1.Action - Button click is an action
2.Dispatcher - Taking finalized data to store
3.Store  - centralized state data
4.View - Displaying in UI with  store data.

Redux implementation:
Step1:
cmd:npm install npm install @reduxjs/toolkit -  version 7-8 (redux toolkit);
Step2:
we need to create one folder called store inside store create one file called store.js
step3:
Please import store.js inside the index.js and use provider from redux.
step4:
create one folder called reducer and create one file to dispatch the data.
step5: In any component you can call reducer to disptach data.
step6: you can use store data anywhere by using the concept of useSelector.
============================================================
performance optimization
1.lazy loading - whenever we on particular route then only component will unbundle in the browser.
2.usecallback
3.useMemo
4.Drilling of props to avoid(useContext)
5.UI resuable component ex button component,spinner component
=================================================================
Batch Scheduling:
1.All react states are async code.
2.Async code will not depend on another state.
3.If you need state to be updated after another state update please use useEffects()
4.If any state changes happens entire functional component will re-render.
5.Multiple states in one single function will re-render only one time from react 17 onwards because of batch scheduling architecture.
6.Batch scheduling is already written by react developers. During compilation it will take care automatically.
-----------------------------------------------------------------------
Topics:
1.Functional component and class component 
2.Virtual DOM and Real DOM
3.what is package.json 
4.What is props and state in functional component 
5.What is props and state in class component 
6.Lifecycle hooks in class component 
7.useHooks in functional component 
      1.useState
      2.useEffect 
      3.useCallback
      4.useContext
      5.useRef
      6.useMemo 
      7.useReducer 
8.What is jsx and how to write condition inside the jsx 
9.how to iterate data inside the jsx using map function 
10.concept of key inside the map function 
11.how to pass props from parent component to child component 
12.how to call methods from child component to parent component 
13.form validations 
14.react routing 
       1.BrowserRouter 
       2.Routes
       3.Route 
       4.Element
       5.Link 
       6.NavLink
       7.useNavigate 

15.lazy loading 
16.batch scheduling
       1.concept of sync and async code 
       2.bulk state updates 
       3.state dependency with another state 
       4.component rerender process 
17.how to use dynamic images inside the react application
18. how to apply normal css class and dynamic styling 
=====================================================================











































